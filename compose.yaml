name: starter-kit

services:
  postgres:
    image: postgres:17-alpine
    container_name: starter-postgres
    env_file:
      - ./db/.env.dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/sql/db_schema_dump.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - localnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    container_name: starter-backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
      - "5005:5005"
    env_file:
      - ./backend/.env.dev
    volumes:
      - ./backend:/app
      - ~/.gradle:/root/.gradle
    command: "./gradlew bootRun --args='--spring.profiles.active=dev' -Dorg.gradle.jvmargs='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - localnet

  frontend:
    container_name: starter-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.dev
    environment:
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next_cache:/app/.next
    depends_on:
      backend:
        condition: service_started
    networks:
      - localnet

volumes:
  postgres_data:
  frontend_node_modules:
  frontend_next_cache:

networks:
  localnet:
    driver: bridge
